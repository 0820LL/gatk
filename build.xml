<project name="Sting" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>Compile and distribute the Sting genome analysis toolkit</description>

  <!-- set global properties for this build -->
  <property name="core.src" location="core/java/src"/>
  <property name="core.build" location="core/java/build"/>
  <property name="playground.src" location="playground/java/src" />
  <property name="playground.build" location="playground/java/build" />

  <property name="dist"  location="dist"/>
  <property name="lib"  location="lib"/>
  <property name="javadoc" location="javadoc" />

  <path id="classpath">
    <fileset dir="${lib}" includes="*.jar" />
  </path>

  <!-- ivy properties -->
  <property name="ivy.install.version" value="2.0.0" />
  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="ivy-${ivy.install.version}.jar" />
  <property name="ivy.settings.dir" value="settings" />
  <property file="${ivy.settings.dir}/ivysettings.properties" />

  <target name="resolve" depends="init"
          description="locate and download library dependencies">
    <!-- retrieve ivy if necessary -->
    <mkdir dir="${ivy.jar.dir}" />
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/${ivy.jar.file}"
         dest="${ivy.jar.dir}/${ivy.jar.file}" 
         usetimestamp="true"/>
    <!-- initialize and load ivy -->
    <taskdef resource="org/apache/ivy/ant/antlib.xml" 
             uri="antlib:org.apache.ivy.ant" 
             classpath="${ivy.jar.dir}/${ivy.jar.file}" />
    <ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />
    <!-- retrieve dependencies -->
    <ivy:retrieve />
  </target>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${core.build}" />
    <mkdir dir="${playground.build}" />
  </target>

  <target name="compile" depends="init,resolve"
          description="compile the source">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${core.src}" destdir="${core.build}" classpathref="classpath" 
           debug="true" debuglevel="lines,vars,source" />
    <javac srcdir="${playground.src}" destdir="${playground.build}" classpathref="classpath"
           debug="true" debuglevel="lines,vars,source" />
  </target>

  <target name="dist" depends="compile"
          description="generate the distribution" >
    <mkdir dir="${dist}"/>

    <copy todir="${dist}">
      <fileset dir="${lib}" includes="*.jar" />
    </copy>

    <jar jarfile="${dist}/StingUtils.jar">
      <fileset dir="${playground.build}" includes="org/broadinstitute/sting/utils/**" />
    </jar>

    <jar jarfile="${dist}/GenomeAnalysisTK.jar">
      <fileset dir="${playground.build}" includes="org/broadinstitute/sting/gatk/**" />
      <manifest>
        <attribute name="Main-Class" value="org.broadinstitute.sting.gatk.GenomeAnalysisTK" />
      </manifest>
    </jar>

    <jar jarfile="${dist}/Playground.jar">
      <fileset dir="${playground.build}">
        <exclude name="org/broadinstitute/sting/utils/**" />
        <exclude name="org/broadinstitute/sting/gatk/**" />
      </fileset>
    </jar>

    <pathconvert property="jar.classpath" pathsep=" ">
      <flattenmapper />
      <fileset dir="${dist}" includes="*.jar" />
    </pathconvert>

    <jar jarfile="${dist}/StingUtils.jar" update="true">
      <manifest>
        <attribute name="Class-Path" value="${jar.classpath}" />
      </manifest>
    </jar>

    <jar jarfile="${dist}/GenomeAnalysisTK.jar" update="true">
      <manifest>
        <attribute name="Class-Path" value="${jar.classpath}" />
      </manifest>
    </jar>

    <jar jarfile="${dist}/Playground.jar" update="true">
      <manifest>
        <attribute name="Class-Path" value="${jar.classpath}" />
      </manifest>
    </jar>

  </target>

  <target name="javadoc">
    <mkdir dir="${javadoc}" />
    <javadoc sourcepath="${src}" destdir="${javadoc}" />
  </target>

  <target name="clean"
          description="clean up" >
    <delete dir="${core.build}"/>
    <delete dir="${playground.build}" />
    <delete dir="${dist}"/>
    <delete dir="${lib}" />
  </target>
</project>
