package org.broadinstitute.sting.alignment.bwa;

import org.broadinstitute.sting.utils.cmdLine.Argument;
import org.broadinstitute.sting.utils.BaseUtils;
import org.broadinstitute.sting.utils.StingException;
import org.broadinstitute.sting.alignment.Alignment;
import org.broadinstitute.sting.gatk.walkers.ReadWalker;
import net.sf.samtools.SAMRecord;

import java.util.Random;

/**
 * Javadoc goes here.
 *
 * @author mhanna
 * @version 0.1
 */
public class AlignmentWalker extends ReadWalker<Integer,Integer> {
    @Argument(fullName="BWTPrefix",shortName="BWT",doc="Index files generated by bwa index -d bwtsw",required=false)
    String prefix = "/Users/mhanna/reference/Ecoli/Escherichia_coli_K12_MG1655.fasta";

    /**
     * The actual aligner.
     */
    private BWACAligner aligner = null;

    /**
     * A random number generator, used to generate alignments.
     */
    private Random random = new Random();

    @Override
    public void initialize() {
        aligner = new BWACAligner(prefix + ".ann",
                                  prefix + ".amb",
                                  prefix + ".pac",
                                  prefix + ".bwt",
                                  prefix + ".sa",
                                  prefix + ".rbwt",
                                  prefix + ".rsa");
    }

    public Integer reduceInit() { return 0; }

    @Override
    public Integer map(char[] ref, SAMRecord read) {
        SAMRecord[] alignedReads = aligner.align(read);
        SAMRecord selectedRead = alignedReads[random.nextInt(alignedReads.length)];
        out.println(selectedRead.format());
        return 1;
    }

    public Integer reduce(Integer value, Integer sum) {
        return value + sum;
    }

    @Override
    public void onTraversalDone(Integer result) {
        aligner.close();
        super.onTraversalDone(result);
    }

}
